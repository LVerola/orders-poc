services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../backend/Orders.Api
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__Default=Host=${POSTGRES_HOST};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - SERVICEBUS_CONNECTIONSTRING=${SERVICEBUS_CONNECTIONSTRING}
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      /bin/sh -c "
        dotnet Orders.Api.dll
      "

  worker:
    build: ../worker/Orders.Worker
    environment:
      - ConnectionStrings__Default=Host=${POSTGRES_HOST};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - SERVICEBUS_CONNECTIONSTRING=${SERVICEBUS_CONNECTIONSTRING}
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    command: >
      /bin/sh -c "
        sleep 5 && dotnet Orders.Worker.dll
      "
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: node:22-alpine
    working_dir: /app
    ports:
      - "3000:5173"
    volumes:
      - ../frontend/Orders.Frontend:/app
    command: sh -c "npm install && npm run dev -- --host"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api
